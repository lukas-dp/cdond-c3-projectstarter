version: 2.1

commands:
  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
      event:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: <<parameters.event>>
          command: |
            echo "Destroying environment: ${CIRCLE_WORKFLOW_ID:0:7}"
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>


  revert_migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
      event:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: <<parameters.event>>
          # when: equal: [curl -H "token: 4cc6e040-fba2-4b87-abe1-725d45b81e4e" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}, 1]
          command: |
            export SUCCESS = `curl -H "token: 4cc6e040-fba2-4b87-abe1-725d45b81e4e" --request GET https://api.memstash.io/values/migration_<<parameters.workflow_id>>`
            if(( $SUCCESS==1 ));
            then
             cd ~/project/backend
             npm install
             npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm i
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm i
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend-end scan
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> .circleci/ansible/inventory.txt
              echo `cat .circleci/ansible/inventory.txt`

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - run:
          name: Save URL to MemStash
          command: |
            BACKEND_IP=`aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text`
            curl -H "Content-Type: text/plain" -H "token: bf0a3403-4a22-4be5-a496-a3f9ac539961" --request PUT --data "${BACKEND_IP}" https://api.memstash.io/values/url

      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail



  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["3e:ee:c3:48:cb:aa:5b:a9:94:52:71:9a:73:f3:f9:1a"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            echo `cat .circleci/ansible/inventory.txt`
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
          # apk add --no-cache openssh-client && ssh-keyscan 3.143.116.91 > ~/.ssh/known_hosts

      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail



  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            pwd
            npm run migrations > migration.output
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully."
            then
              echo "Migration worked, saving into memstash..."
              curl -H "Content-Type: text/plain" -H "token: 4cc6e040-fba2-4b87-abe1-725d45b81e4e" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            else
              echo "Migration failed, saving into memstash..."
              curl -H "Content-Type: text/plain" -H "token: 4cc6e040-fba2-4b87-abe1-725d45b81e4e" --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            fi

      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail




  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP = curl -H "token: bf0a3403-4a22-4be5-a496-a3f9ac539961" --request GET https://api.memstash.io/values/url
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            ls -l
      - run:
          name: Copy files to S3
          command: |
            aws s3 sync . s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive --acl public-read

      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail
      - revert_migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail


  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["3e:ee:c3:48:cb:aa:5b:a9:94:52:71:9a:73:f3:f9:1a"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Deploy backend
          command: |
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      - run:
          name: Deploy Prometheus node exporter
          command: |
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/prometheus-monitoring.yml

      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail
      - revert_migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail




  smoke-test:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP = curl -H "token: bf0a3403-4a22-4be5-a496-a3f9ac539961" --request GET https://api.memstash.io/values/url
            export API_URL="http://${BACKEND_IP}:3030"
            URL="http://${BACKEND_IP}:3000"
            if curl -s --head ${URL}
            then
              return 0
            else
              return 1
            fi
          # curl ${API_URL}/api/status
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-east-2.amazonaws.com"
            if curl -s --head ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi

      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail
      - revert_migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail




  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)

            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))

            echo "Old Workflow Id: ${OldWorkflowID}"

            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name "udapeople-cloudfront" \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
              --tags project=udapeople

              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
                aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
                aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
              fi

      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail
      - revert_migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail

  cleanup:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Get old stack workflow id
            command: |
              export OldWorkflowID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
              echo "Old Workflow Id: ${OldWorkflowID}"
               echo "Current Workflow Id: ${CurrentWorkflowID}"
        - run:
            name: Remove old stacks and files
            command: |
              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
                aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
                aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
                echo "Delete old versions"
              else
                echo "No stacks to delete"
              fi


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - scan-backend:
      #     requires: [build-backend]
      - deploy-infrastructure:
          requires: [build-frontend, build-backend]
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
